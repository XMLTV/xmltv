#!/usr/bin/perl

=pod

=head1 NAME

tv_grab_si - Grab TV listings for Slovenia (from tv-spored.siol.net webpage).

=head1 SYNOPSIS

tv_grab_si --help

tv_grab_si [--config-file FILE] --configure [--gui OPTION]

tv_grab_si [--config-file FILE] [--output FILE] [--quiet]
           [--days N] [--offset N]

tv_grab_si --list-channels

tv_grab_si --capabilities

tv_grab_si --version

=head1 DESCRIPTION

Output TV listings for several channels available in Slovenia.
The data comes from tv-spored.siol.net. The grabber relies on
parsing HTML so it might stop working at any time.

First run B<tv_grab_si --configure> to choose, which channels
you want to download. Then running B<tv_grab_si> with no
arguments will output listings in XML format to standard output.

B<--configure> Ask for each available channel whether to download
and write the configuration file.

B<--config-file FILE> Set the name of the configuration file, the
default is B<~/.xmltv/tv_grab_si.conf>.  This is the file
written by B<--configure> and read when grabbing.

B<--gui OPTION> Use this option to enable a graphical interface to be used.
OPTION may be 'Tk', or left blank for the best available choice.
Additional allowed values of OPTION are 'Term' for normal terminal output
(default) and 'TermNoProgressBar' to disable the use of Term::ProgressBar.

B<--output FILE> Write to FILE rather than standard output.

B<--days N> Grab N days.  The default is fourteen.

B<--offset N> Start N days in the future.  The default is to start
from now on (= zero).

B<--quiet> Suppress the progress messages normally written to standard
error.

B<--list-channels> Write output giving <channel> elements for every
channel available (ignoring the config file), but no programmes.

B<--capabilities> Show which capabilities the grabber supports. For more
information, see L<http://wiki.xmltv.org/index.php/XmltvCapabilities>

B<--version> Show the version of the grabber.

B<--help> print a help message and exit.


=head1 SEE ALSO

L<xmltv(5)>.

=head1 AUTHORS

Sagudev. Inspired by tv_grab_ch_search by Daniel Bittel.

=head1 BUGS

If you happen to find a bug, you're requested to send a mail to one of the
XMLTV mailing lists, see webpages at http://sourceforge.net/projects/xmltv/.

=cut

use warnings;
use strict;
use Encode;
use DateTime;
use LWP::Simple;
use XMLTV;
use XMLTV::Version "$XMLTV::VERSION";
use XMLTV::Capabilities qw/baseline manualconfig cache/;
use XMLTV::Description 'Slovenia (tv-spored.siol.net)';
use XMLTV::Supplement qw/GetSupplement/;
use Getopt::Long;
use HTML::TreeBuilder;
use HTML::Entities;
use URI::Escape;
use URI::URL;
use XMLTV::Ask;
use XMLTV::ProgressBar;
use XMLTV::DST;
use XMLTV::Config_file;
use XMLTV::Mode;
use XMLTV::Get_nice;
use XMLTV::Memoize;
use XMLTV::Usage<<END
$0: get Slovenian television listings from tv-spored.siol.net in XMLTV format
To configure: $0 --configure [--config-file FILE] [--gui OPTION]
To grab data: $0 [--config-file FILE] [--output FILE] [--quiet]
                 [--days N] [--offset N]
Channel List: $0 --list-channels
To show capabilities: $0 --capabilities
To show version: $0 --version

END
  ;

# Use Log::TraceMessages if installed.
BEGIN {
    eval { require Log::TraceMessages };
    if ($@) {
        *t = sub {};
        *d = sub { '' };
    }
    else {
        *t = \&Log::TraceMessages::t;
        *d = \&Log::TraceMessages::d;
    }
}



## our own prototypes first ...
sub get_channels();
sub get_page($);

## attributes of xmltv root element
my $head = {
    'source-data-url'      => 'https://tv-spored.siol.net/kanali',
    'source-info-url'      => 'https://tv-spored.siol.net',
    'generator-info-name'  => 'XMLTV',
    'generator-info-url'   => 'http://xmltv.org/',
};



## the timezone tv-spored.siol.net lives in is, CET/CEST
my constant $TZ = "+0100";
my constant $lang = "sl";



## Parse argv now.  First do undocumented --cache option.
XMLTV::Memoize::check_argv('XMLTV::Get_nice::get_nice_aux');



my $opt_configure;
my $opt_config_file;
my $opt_gui;
my $opt_output;
my $opt_days = 4;
my $opt_offset = 0;
my $opt_quiet = 0;
my $opt_slow = 0;
my $opt_list_channels;
my $opt_help;

GetOptions(
    'configure'      => \$opt_configure,
    'config-file=s'  => \$opt_config_file,
    'gui:s'          => \$opt_gui,
    'output=s'       => \$opt_output,
    'days=i'         => \$opt_days,
    'offset=i'       => \$opt_offset,
    'quiet'          => \$opt_quiet,
    'slow'           => \$opt_slow,
    'list-channels'  => \$opt_list_channels,
    'help'           => \$opt_help,
) or usage(0);

usage(1) if $opt_help;

XMLTV::Ask::init($opt_gui);

## make sure offset+days arguments are within range
die "neither offset nor days may be negative"
  if($opt_offset < 0 || $opt_days < 0);


## calculate global start/stop times ...
my $grab_start = DateTime->now(time_zone => 'Europe/Ljubljana')->add( days => $opt_offset );
my $grab_stop = DateTime->now(time_zone => 'Europe/Ljubljana')->add ( days => $opt_offset + $opt_days );

my $mode = XMLTV::Mode::mode('grab', # default value
    $opt_configure => 'configure',
    $opt_list_channels => 'list-channels',
);



## initialize config file support
my $config_file = XMLTV::Config_file::filename($opt_config_file, 'tv_grab_si', $opt_quiet);
my @config_lines;

if($mode eq 'configure') {
    XMLTV::Config_file::check_no_overwrite($config_file);
}
elsif($mode eq 'grab' || $mode eq 'list-channels') {
    @config_lines = XMLTV::Config_file::read_lines($config_file);
}
else { die("never heard of XMLTV mode $mode, sorry :-(") }


## initialize user agent
my $ua = LWP::UserAgent->new(keep_alive => 300);
$ua->agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.2) Gecko/20100101 Firefox/78.2 xmltv/$XMLTV::VERSION");
$ua->env_proxy;


## hey, we can't live without channel data, so let's get those now!
my $bar = new XMLTV::ProgressBar( 'getting list of channels', 1 )
    if not $opt_quiet;

my ($channels_ref, $channels_logo_ref) = get_channels();
my %channels_logo = %$channels_logo_ref;
my %channels = %$channels_ref;

$bar->update() if not $opt_quiet;
$bar->finish() if not $opt_quiet;


my @requests;

## read our configuration file now
my $line = 1;
foreach(@config_lines) {
    $line ++;
    next unless defined;

    if (/^channel:?\s+(\S+)/) {
        warn("\nConfigured channel $1 not available anymore. \nPlease reconfigure tv_grab_si.\n"),
          next unless(defined($channels{$1}));
        push @requests, $1;
    } else {
        warn "$config_file:$line: bad line\n";
    }
}

## if we're requested to do so, write out a new config file ...
if ($mode eq 'configure') {
    open(CONFIG, ">$config_file") or die("cannot write to $config_file, due to: $!");

    ## now let's annoy the user, sorry, I meant ask ..
    my @chs = sort keys %channels;
    my @names = map { $channels{$_} } @chs;
    my @qs = map { "add channel $_?" } @names;
    my @want = ask_many_boolean(1, @qs);

    foreach (@chs) {
        my $w = shift @want;
        my $chname = shift @names;

        warn("cannot read input, stopping to ask questions ..."), last if not defined $w;

        print CONFIG '#' if not $w; #- comment line out if user answer 'no'

        # shall we store the display name in the config file?
        # leave it in, since it probably makes it a lot easier for the
        # user to choose which channel to comment/uncommet - when manually
        # viing the config file -- are there people who do that?
        print CONFIG "channel $_ #$chname\n";
    }

    close CONFIG or warn "unable to nicely close the config file: $!";
    say("Finished configuration.");

    exit();
}



## well, we don't have to write a config file, so, probably it's some xml stuff :)
## if not, let's go dying ...
die unless($mode eq 'grab' or $mode eq 'list-channels');

my %writer_args;
if (defined $opt_output) {
    my $handle = new IO::File(">$opt_output");
    die "cannot write to output file, $opt_output: $!" unless (defined $handle);
    $writer_args{'OUTPUT'} = $handle;
}

$writer_args{'encoding'} = 'utf-8';


if( defined( $opt_days )) {
    $writer_args{offset} = $opt_offset;
    $writer_args{days} = $opt_days;
    $writer_args{cutoff} = "000000";
}

## create our writer object
my $writer = new XMLTV::Writer(%writer_args);
$writer->start($head);



if ($mode eq 'list-channels') {
    foreach (keys %channels) {
        my %channel = ('id'           => $_,
                       'display-name' => [[$channels{$_}, $lang]],
                       'icon' => [{'src' => $channels_logo{$_}}]);
        $writer->write_channel(\%channel);
    }

    $writer->end();
    exit();
}



## there's only one thing, why we might exist: write out tvdata!
die unless ($mode eq 'grab');
die "No channels specified, run me with --configure flag\n" unless(scalar(@requests));



## write out <channel> tags
foreach(@requests) {
    my $id = $_;
    my %channel = ('id'           => $id,
                   'display-name' => [[$channels{$_}, $lang]],
                   'icon' => [{'src' => $channels_logo{$_}}]);
    $writer->write_channel(\%channel);
}

## write out <programme> tags
foreach(@requests) {
    my $id = $_;
    grab_channel_data($id);
}

## hey, looks like we've finished ...
$writer->end();


sub parse_show {
    my ($link, $id, $parse_date, $start_time, $end_time) = @_;
    #my $link = @_[0];
    #my $id = @_[1];
    #my $parse_date = @_[2];
    #my $start_time = @_[3];
    #my $end_time = @_[4];
    my $url = $head->{q(source-info-url)};
    my $tv_show = HTML::TreeBuilder->new();
    # put date in right format for website
    my $req = HTTP::Request->new(GET => "$url"."$link");
    $req->header('Accept' => 'text/html');
    $tv_show->ignore_unknown(0); # otherwise, html5 tags like section are stripped out
    $tv_show->parse(($ua->request($req))->content)
        or die "cannot parse content of $url"."$link";
    $tv_show->eof;


    my %show;
    $show{channel} = $id;



    my $show_start = DateTime->new (
        year => $parse_date->year()
        ,month => $parse_date->month()
        ,day   => $parse_date->day()
        ,hour  => substr($start_time, 0, 2)
        ,minute => substr($start_time, -2)
        ,second => 0 # no data
        ,time_zone => 'Europe/Ljubljana');
    $show{start} = $show_start->strftime( "%Y%m%d%H%M%S %z" );
    if(int(substr($start_time, 0, 2)) > int(substr($end_time, 0, 2))) { # new day
        $parse_date = $parse_date->add ( days => 1 );
    }
    $show{stop} = DateTime->new (
        year => $parse_date->year()
        ,month => $parse_date->month(),
        ,day   => $parse_date->day(),
        ,hour  => substr($end_time, 0, 2)
        ,minute => substr($end_time, -2)
        ,second => 0 # no data
        ,time_zone => 'Europe/Ljubljana'
    )->strftime( "%Y%m%d%H%M%S %z" );

    #$tv_show = $tv_show->look_down('itemtype' => 'http://schema.org/Episode');
    my $title_tag = $tv_show->look_down('_tag' => 'h2', 'class' => 'inline-heading');
    #$title_tag->objectify_text();
    my $title = $title_tag->look_down('_tag' => 'span');
    $show{'title'} = [[$title->as_text(), $lang]];

    my $sub_title = $title_tag->look_down('_tag' => 'span', 'class' => 'original-title');
    $show{'sub-title'} = [[$sub_title->as_text(), $lang]] if($sub_title);

    # Beschreibung
    my $desc = "";
    foreach my $description ($tv_show->look_down('_tag' => 'p', 'class' => 'content')) {
        $desc = "$desc ".$description->as_text() if ($description);
    }
    $show{desc} = [[ $desc, $lang ]] if ($desc);
    $show{icon} = [{'src' => $tv_show->look_down('itemprop' => 'image')->attr_get_i('content')}];

    # Produktionsjahr
    #foreach my $year ($tv_show->look_down('class' => 'tv-detail-year tv-detail-short')) {
    #    $show{date} = $year->right()->as_text();
    #}

    my $meta = $tv_show->look_down('_tag' => 'p', 'class' => 'event-meta');

    # category
    push @{$show{category}}, [substr($meta->as_text(), 0, index($meta->as_text(), '/')), $lang ];
    my $genre = $meta->look_down('itemprop' => 'genre');
    if($genre) {
        push @{$show{category}}, [$genre->as_text(), $lang ];
    };

    # Produktionsland
    #foreach my $country ($tv_show->look_down('class' => 'tv-detail-country tv-detail-short')) {
    #    my @countries = split(m/\s*[\/,]\s*/, $country->right()->as_text());
    #    foreach (@countries) {
    #        push @{$show{country}}, [$_, $lang ];
    #    }
    #}

    # Cast
    foreach my $cast ($tv_show->look_down('itemprop' => 'actor')) {
        push @{$show{credits}{actor}}, $cast->look_down('itemprop' => 'name')->as_text();
    }

    # Director
    foreach my $dir ($tv_show->look_down('itemprop' => 'director')) {
        push @{$show{credits}{director}}, $dir->look_down('itemprop' => 'name')->as_text();
    }

    # Episode
    if($meta->look_down('itemprop' => 'partOfSeason')) {
        my $season = int($meta->look_down('itemprop' => 'seasonNumber')->as_text()) - 1;
        my $episode = int($meta->look_down('itemprop' => 'episodeNumber')->as_text()) - 1;
        $show{'episode-num'} = [[ "$season.$episode." , 'xmltv_ns' ]];
    }

    $show{'star-rating'} = [substr($meta->as_trimmed_text(), -45, 3)."/10"];

    $writer->write_programme(\%show);
}

sub parse_show_list {
    my ($tb, $parse_date, $id) = @_;
    for (@{  $tb->look_down('class' => 'table-list-rows')->extract_links('a')  }) {
        # some things are parsed here
        my $element=@$_[1]->look_down('class' => 'col-9');
        my $start_time = $element->attr_get_i('data-start_time');
        my $end_time = $element->attr_get_i('data-end_time');
        parse_show(@$_[0], $id, $parse_date, $start_time, $end_time);
    };
}

sub grab_channel_data {
    my ($id) = @_;
    my $grabDate = $grab_start->clone();
    my $url = $head->{q(source-info-url)};
    grab_channel_loop:
        my $tb = HTML::TreeBuilder->new();
        # put date in right format for website
        my $loop_date = $grabDate->year() . substr("0".$grabDate->month(),-2) . substr("0".$grabDate->day(),-2);
        my $req = HTTP::Request->new(GET => "$url/kanal/$id/datum/$loop_date");
        $req->header('Accept' => 'text/html');
        $tb->ignore_unknown(0); # otherwise, html5 tags like section are stripped out
        $tb->parse(($ua->request($req))->content)
            or die "cannot parse content of $url/$id/$loop_date";
        $tb->eof;

        parse_show_list($tb, $grabDate, $id);

        $tb->delete();

    $grabDate = $grabDate->add ( days => 1 );
    if( DateTime->compare ( $grab_stop, $grabDate ) > 0) {
        goto grab_channel_loop;
    }
}

## get channel listing
sub get_channels() {
    my %channels;
    my %channels_logo;
    my $url=$head->{q(source-data-url)};

    my $tb=new HTML::TreeBuilder();
    $tb->parse($ua->get($url)->content)
        or die "cannot parse content of $url";
    $tb->eof;

    ## getting the channels directly selectable
    foreach($tb->look_down('_tag' => 'a', class => 'row')) {
        my $channel_name = ($_->look_down('_tag' => 'div', class => 'col-11'))->as_text;
        my $channel_logo = ($_->look_down('_tag' => 'img'))->attr_get_i('src');
        my $id = substr($_->attr_get_i('href'), 7);
        $channels{uri_escape($id)} = $channel_name;
        $channels_logo{uri_escape($id)} = "http:" . $channel_logo;
    }
    $tb->delete;

    return (\%channels, \%channels_logo);
}



## get_page($url) :: try to download $url via http://, look for closing </body> tag or die
sub get_page($) {
    my $url = shift;
    my $retry = 0;

    local $SIG{__DIE__} = sub { die "\n$url: $_[0]" };

    while($retry < 2) {
        my $got = eval { get_nice($url . ($retry ? "&retry=$retry" : "")); };
        $retry ++;

        next if($@); # unable to download, doesn't look too good for us.
        return $got;
    }

    die "cannot grab webpage $url (tried $retry times). giving up. sorry";
}
